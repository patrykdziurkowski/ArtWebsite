@using web.Features.ArtPieces.UploadArtPiece
@model UploadArtPieceModel

<h1>Upload an art piece!</h1>

<div id="tui-image-editor-container" class="tui-image-editor-container bottom"
    style="width:100%; height:100%;display:none;"></div>

<form id="upload-form" asp-action="Upload" method="POST" enctype="multipart/form-data">
    <div class="form-group">
        <label for="Image">Choose an image</label>
        <input type="file" class="form-control" id="image-input" name="Image" accept="image/*" asp-for="Image" />
        <span asp-validation-for="Image" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label for="Description">Description</label>
        <textarea class="form-control" id="description-input" name="Description" rows="4"
            asp-for="Description"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <button id="upload-submit" type="submit" class="btn btn-primary">Upload</button>
</form>

<link type="text/css" href="https://uicdn.toast.com/tui-color-picker/v2.2.6/tui-color-picker.css" rel="stylesheet">
<link rel="stylesheet" href="https://uicdn.toast.com/tui-image-editor/latest/tui-image-editor.css">

@section Scripts
{
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/4.4.0/fabric.js"></script>
    <script type="text/javascript" src="https://uicdn.toast.com/tui.code-snippet/v1.5.0/tui-code-snippet.min.js"></script>
    <script type="text/javascript" src="https://uicdn.toast.com/tui-color-picker/v2.2.6/tui-color-picker.js"></script>
    <script type="text/javascript"
        src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/1.3.3/FileSaver.min.js"></script>
    <script type="text/javascript" src="~/js/tui-image-editor.js"></script>
    <script type="text/javascript" src="~/js/theme/white-theme.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            let validImageLoaded = false;

            const imageEditor = new tui.ImageEditor('#tui-image-editor-container', {
                includeUI: {
                    loadImage: {
                        path: '/img/placeholder.png',
                        name: 'SampleImage',
                    },
                    theme: whiteTheme,
                    initMenu: 'filter',
                    menuBarPosition: 'bottom',
                },
                cssMaxWidth: 800,
                cssMaxHeight: 1000,
                usageStatistics: false,
            });

            window.onresize = function () {
                imageEditor.ui.resizeEditor();
            };

            document.querySelector('#image-input').onchange = async (e) => {
                const file = e.target.files[0];
                const imageEditorContainer = document.querySelector('#tui-image-editor-container');
                if (file) {
                    imageEditorContainer.style.display = 'block';
                    try {
                        await imageEditor.loadImageFromFile(file);
                        validImageLoaded = true;
                    } catch {
                        validImageLoaded = false;
                    }
                }
                else {
                    imageEditorContainer.style.display = 'none';
                    validImageLoaded = false;
                }
            };

            // replaces the image to be sent to the server with the one
            // from the image editor
            document.querySelector('#upload-form').onsubmit = async (e) => {
                if (!validImageLoaded) {
                    return;
                }

                const dataURL = imageEditor.toDataURL();
                fetch(dataURL)
                    .then(res => res.blob())
                    .then(blob => {
                        const fileInput = document.querySelector('#image-input');
                        const file = new File([blob], 'edited-image.png', { type: 'image/png' });

                        const container = new DataTransfer();
                        container.items.add(file);
                        fileInput.files = container.files;
                    });
            };
        });
    </script>
}